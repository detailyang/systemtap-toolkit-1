#! /usr/bin/env perl

# Copyright (C) YangBingwu (detailyang)

use 5.006001;
use strict;
use warnings;
use Getopt::Std qw( getopts );

sub usage();

my %opts;

getopts("a:hT:l:p:t:d", \%opts) or die usage();

if ($opts{h}) {
    print usage();
    exit;
}

my $pid = $opts{p} || 0;
my $pid_condition = "";
if ($pid) {
    $pid_condition = <<_EOS_;
    if ($pid > 0) {
        if (pid() != $pid) next
    }
_EOS_
}

my $time = $opts{t} || 20000;
if ($time !~ /^\d+$/) {
    die "Bad -t option value \"$time\": not look like time\n";
}

my $phpredis_path = $opts{l} || "";
if (! -f $phpredis_path) {
    die "redis.so path $phpredis_path is not exist or ",
    "you do not have enough permissions.\n";
}

my $slowtime = $opts{T} || 0;
if ($slowtime !~ /^\d+$/) {
    die "Bad -T option value \"$slowtime\": not look like time\n";
}

my $stap_args = $opts{a} || '';

my $preamble = <<_EOS_;
global t%
global pp%
global k%

probe begin {
    log("Tracing phpredis ($phpredis_path)\\n")
}
_EOS_

my $stap_src = <<_EOS_;
$preamble

probe process("$phpredis_path").function("zim_Redis_*") {
    $pid_condition
    pp[tid()] = sprintf("%s", ppfunc())
    t[ppfunc(), tid()] = gettimeofday_us()
}

probe process("$phpredis_path").function("zim_Redis_*").return {
    $pid_condition
    begin = t[ppfunc(), tid()]

    if (begin) {
        elapsed = gettimeofday_us() - begin
        if (elapsed < $slowtime * 1000) next
        cmd = k[tid()]
        if (cmd != "") {
            printf("%s(%d)<%s[%dus]>:%s\\n", execname(), tid(), ppfunc(), elapsed, k[tid()])
        } else {
            printf("%s(%d)<%s[%dus]>\\n", execname(), tid(), ppfunc(), gettimeofday_us() - begin)
        }
    }

    delete t[ppfunc(), tid()]
    delete k[tid()]
    delete pp[tid()]
}

probe process("$phpredis_path").function("redis_sock_write") {
    $pid_condition

    func = pp[tid()]
    if (func != "") {
        k[tid()] = sprintf("%s", str_replace(user_string_n(\$cmd, \$sz), "\\r\\n", " "))
    }
}

%(
$time > 0
%?
probe timer.ms($time) {
    warn("Time Ending....")
    exit()
}
%:
probe end {
    exit()
}
%)
_EOS_

if ($opts{d}) {
    print $stap_src;
    exit;
}

open my $in, "|stap --skip-badvars $stap_args -"
    or die "Cannot run stap: $!\n";

print $in $stap_src;

close $in;

sub usage() {

    return <<'_EOC_';
Usage:
    phpredis-watch-query [optoins]
Options:
    -a <args>           Pass extra arguments to the stap utility.
    -d                  Dump out the systemtap script source.
    -h                  Print this usage.
    -p <pid>            Specify the pid to sampling.
    -l <pdo_mysql.so>   Specify the path of redis.so to sampling.
    -t <time>ms         Specify the number of mseconds for sampling.
    -T <slow time>ms    Specify the threshold of mseconds for sampling.
Examples:
    phpredis-watch-query -p 12345 -l /usr/lib64/php/modules/redis.so -t 1000
_EOC_
}
